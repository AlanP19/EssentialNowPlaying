<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAAvBQAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAABPZJ
        REFUeJzt1TtyFEEQRdHisy8cFsbCMDDENjDYiDBERwhiEPPp7ldZeU5E2tNGvTtjAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAD/8yH9AWOMpzHGzzHGj/SHAOd7/n1PY4zP4W8BTvb81wkBNPJ3AIQA
        GvlXAIQAGvhfAIQAFnZtAIQAFnRrAIQAFnJvAIQAFvBoAIQACtsrAEIABe0dACGAQo4KgBBAAUcHQAhg
        YmcFQAhgQmcHQAhgIqkACAFMIB0AIYCg9PCFAILSgxcCCEoPXQggKD1wIYCg9LCFAILSgxYCCEoPWQgg
        KD1gIYCg9HCFAILSgxUCCEoPVQggKD1QIYCg9DCFAILSgxQCCEoPMX1CQGvpAc5yQkBL6eHNdkJAK+nB
        zXpCQAvpoc1+QsDS0gOrckLAktLDqnZCwFLSg6p6QsAS0kOqfkJAaekBrXJCQEnp4ax2QkAp6cGsekJA
        CemhrH5CwNTSA+lyQsCU0sPodkLAVNKD6HpCwBTSQ+h+QkBUegBOCAhKP3wnBASlH7wTAoLSD90JAUHp
        B+6EgKD0w3ZCQFD6QTshICj9kJ0QEJR+wE4ICEo/XCcEBKUfrBMCgtIP1QkBQekH6oSAoPTDdEJAUPpB
        OiEgKP0QnRC09S79AePlEcD3McaXMcbX8He0IgDMRghOJADMSghOIADMTggOJABUIQQHEACqEYIdCQBV
        CcEOBIDqhOABAsAqhOAOAsBqhOAGAsCqhOAKAsDqhOANAkAXQnCBANCNELwiAHQlBEMAoHUIBABetAyB
        AMCfWoVAAOCyFiEQAHjb0iEQALjOkiEQALjNUiEQALjPEiEQAHhM6RAIAOyjZAgEAPZVKgQCAMcoEQIB
        gGNNHQIBgHNMGQIBgHNNFQIBgIwpQvA++eNA1sf0B0AzU/zzbwQAzjHV8DcCAMeacvgbAYBjTD38jQDA
        vkoMfyMAsI9Sw98IADym5PA3AgD3KT38jQDAbZYY/kYA4DpLDX8jAPC2JYe/EQC4bOnhbwQA/tRi+BsB
        gBethr8RALprOfyNANBV6+FvBIBuDP8VAaALw79AAFid4b9BAFiV4V9BAFiN4d9AAFiF4d9BAKjO8B8g
        AFRl+DsQAKox/B0JAFUY/gEEgNkZ/oEEgFkZ/gkEgNkY/okEgFkYfoAAkGb4zT27lvc0xvg8aC/9EJ3h
        E5R+kM7wCUo/TGf4BKUfqDN8gtIP1Rk+QekH6wyfoPTDdYZPUPoBO8MnKP2QneETlH7QzvAJSj9sZ/gE
        pR+4M3yC0g/dGT5B6QfvDJ+g9MPvfoZPVHoAXc/wmUJ6CN3O8JlKehBdzvCZUnoYq5/hM7X0QFY9w6eE
        9FBWO8OnlPRgVjnDp6T0cKqf4VNaekBVz/BZQnpI1c7wWUp6UFXO8FlSelizn+GztPTAZj3Dp4X00GY7
        w6eV9OBmOcOnpfTw0mf4tJYeoOFDUHqIhg9B6UEaPgSlh2n4EJQeqOFDUHqohg9B6cEaPgSlh2v4EJQe
        sOFDUHrIhg9B6UEbPgSlh234EJQeuOFDUHrohg9B6cEbPgQZPjRm+NCY4UNjhg+NGT40ZvjQmOFDY4YP
        jRk+NGb40JjhQ2OGD40ZPjRm+NCY4UNjhg+NfRtjfEp/BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAXPILzroEKv1IcjMAAAAASUVORK5CYII=
</value>
  </data>
</root>